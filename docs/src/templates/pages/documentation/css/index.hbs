---
title: CSS Principles
section-title: CSS Documentation
description: How we use CSS at Just Eat
docs: true

navgroup: documentation
navsub: docs-css
navactive: css-principles
---

The aim when writing CSS on any platform is to ensure it is well structured, maintainable and flexible.

To help us do that at Just Eat, we use [Sass](#sass) and PostCSS, which allows us to utilise extra CSS processing features beyond the capabilities of Vanilla CSS.

Below, we'll aim to explain how we use CSS, Sass and PostCSS on our projects, as well as covering the methodologies and best practices that have helped to guide our way of thinking.


<a name="philosophy"></a><h2 class="sg-sectionHeading">Philosophy</h2>

When writing CSS for any website, it is important to write styles that are both maintainable and flexible, so that they are easy to extend and can be reused in the future.

There are many CSS methodologies that support this way of thinking, such as [SMACSS](https://smacss.com/), [Atomic Design](http://bradfrost.com/blog/post/atomic-web-design/)) and [ITCSS](https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/).  These all share a lot of common ground when it comes to constructing good CSS; one of main themes being that you should always think about how you can write small, reusable components that can be easily extended later.

We encourage this way of writing CSS, and our styles are [structured to reflect this](#structure), with base styles defined globally and individual components and modules that extend upon these styles.

N.b. [SMACSS](https://smacss.com/) and [Atomic Design](http://atomicdesign.bradfrost.com/table-of-contents/) are both recommended reading for anyone working with CSS.


<a name="bestpractices"></a><h2 class="sg-sectionHeading">Best Practices</h2>

There are a number of great resources outlining CSS Best Practices:

* [CSS Guidelines](http://tech.tmw.co.uk/code/TMW-frontend-guidelines/#section-css)
* [Sass Guidelines](https://sass-guidelin.es/) by [Hugo Giraudel](https://hugogiraudel.com/)
* [Code Smells in CSS](http://csswizardry.com/2012/11/code-smells-in-css/)
* [CSS Specificity](http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/)


<a name="preprocessors"></a><h2 class="sg-sectionHeading">Preprocessors</h2>

We use a combination of [Sass](https://sass-lang.com/) and [PostCSS](https://postcss.org/) to author our stylesheets.

For more information on how we use these tools, check out our documentation sections on [Sass](/css/sass) and [PostCSS](/css/postcss).



<a name="progressive"></a><h2 class="sg-sectionHeading">Progressive Enhancement</h2>

We strongly believe in using progressive enhancement so that we can provide a service to as many users as we can.  Those using modern browsers will get the best possible experience, with those on [older browsers](/general/browser-support) still able to view and use our site.

As part of this effort, we strongly recommend using feature detection over browser or UI sniffing.

Where needed, we use Modernizr to help us do this, and where possible [CSS feature queries via `@supports`](https://caniuse.com/#feat=css-featurequeries) (browser support allowing â€“ ironically).

Resources:
- [Modernizr Documentation](http://modernizr.com)


