---
title: CSS Naming
section-title: CSS Documentation
description: Our commitment to creating an accessible platform
docs: true

navgroup: documentation
navsub: docs-css
navactive: css-naming
---

Naming things is hard but worth getting right.

To make this somewhat easier and ensure our naming is consistent we use a naming scheme based on the [SUIT methodology](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md) within class names.

Using a naming scheme helps to document the intent and relationships from our classnames, as well as easily being able to distinguish classes used solely for state, layout or as a utility operation.

```scss
/* Descriptors use camel-case if more than one word: e.g. twoWords */
.skipToContent {
    ...
}

/* ========= */

/* Child elements use single hyphens: - */
.form-controlGroup {
    ...
}

/* ========= */

/* Modifier element use a double hyphen: -- */
.btn.btn--primary {
    ...
}

/* Layout classes prefixed: .l- */
.l-container {
    ...
}

/* Utility classes prefixed: .u- */
.u-clearfix {
    ...
}
```

## State

We use the `is-` or `has-` prefixes to indicate state.

```
/* ========= */

/* Element state: .is- or .has- */
.is-active {
    ...
}

```

## Sass Variables

When defining Sass variables, we use dash-case.

```
/* ========= */

/* Sass variables use dash-case */
a {
    color: $color-primary;
}
```

